variables:
    # Note: keep "rpm-installer-centos8" and "debian-installer-ubuntu20" job names below
    # consistent with OS versions.
    UBUNTU20_BASE_IMAGE: ubuntu:20.04
    UBUNTU18_BASE_IMAGE: ubuntu:18.04
    CENTOS_BASE_IMAGE: centos:8
    # Projects may want to use images in their own namespace
    # UBUNTU20_CPP_IMAGE: $DOCKER_REGISTRY/$CI_PROJECT_NAMESPACE/hello/ubuntu20
    # UBUNTU18_CPP_IMAGE: $DOCKER_REGISTRY/$CI_PROJECT_NAMESPACE/hello/ubuntu18
    # CENTOS_CPP_IMAGE: $DOCKER_REGISTRY/$CI_PROJECT_NAMESPACE/hello/centos8
    UBUNTU20_CPP_IMAGE: $DOCKER_REGISTRY/research/templates/cpp/ubuntu20
    UBUNTU18_CPP_IMAGE: $DOCKER_REGISTRY/research/templates/cpp/ubuntu18
    CENTOS_CPP_IMAGE: $DOCKER_REGISTRY/research/templates/cpp/centos8

default:
  tags: ["kubernetes"]

stages:
  - check-format
  # - build
  # - cpack-make-installers
  # - cpack-test
  # - cpack-test-shared-lib
  # - cpack-deploy

check-format:
  stage: check-format
  image: ${UBUNTU20_CPP_IMAGE}
  script:
    - pre-commit install-hooks
    - pre-commit run --all-files --show-diff-on-failure

.conan-template: &conan-template
  - conan profile new default --detect
  - conan profile update settings.compiler.libcxx=libstdc++11 default
  - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
  - export CONAN_PASSWORD="$CI_JOB_TOKEN"
  - conan user ci_user -r gitlab -p

.ubuntu-build-template: &ubuntu-build
  stage: build
  needs: [check-format]
  script:
    - *conan-template
    - python3 create-conan-package.py

build-ubuntu20:
  image: ${UBUNTU20_CPP_IMAGE}
  <<: *ubuntu-build

build-ubuntu18:
  image: ${UBUNTU18_CPP_IMAGE}
  <<: *ubuntu-build

coverage:
  stage: build
  needs: [check-format]
  image: ${UBUNTU20_CPP_IMAGE}
  script:
    - *conan-template
    - mkdir build
    - cd build
    - conan install ..
    - cmake -DENABLE_CODE_COVERAGE=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
    - make
    - ctest
    - gcovr -e googletest-src -r ..

# CPack jobs:
rpm-build:
  stage: build
  needs: [check-format]
  image: ${CENTOS_CPP_IMAGE}
  artifacts:
    paths:
      - build/
  script:
    - *conan-template
    # What's the deal with PADDED_DIR? See:
    # https://cmake.org/cmake/help/latest/cpack_gen/rpm.html#variable:CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
    # From the above link: "...Limitation is that replaced path part must
    # be shorter or of equal length than the length of its replacement.  If
    # that is not the case either CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX variable
    # has to be set to a shorter path or source directories must be placed on
    # a longer path."
    - PADDED_DIR=long-dir-name-padding-for-CPACK_RPM_BUILD_SOURCE_DIRS_PREFIX
    - mkdir $PADDED_DIR && cd $PADDED_DIR
    - git clone .. .
    - mkdir build
    - cd build
    - conan install ..
    - cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTIRB_FUNCTION_STRIP_DEBUG_SYMBOLS=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON ..
    - make
    - ctest
    - cpack -G RPM -D CPACK_GTIRB_FUNCTION_PACKAGE=lib
    - cpack -G RPM -D CPACK_GTIRB_FUNCTION_PACKAGE=dev
    - cd ../ && mv build ../build

rpm-make-installers:
  stage: cpack-make-installers
  needs: [rpm-build]
  image: ${CENTOS_BASE_IMAGE}
  artifacts:
    paths:
      - installers/
  script:
    - mkdir installers/
    - cp build/*.rpm installers/


rpm-test-dev:
  stage: cpack-test
  needs: [rpm-make-installers]
  image: ${CENTOS_CPP_IMAGE}
  artifacts:
    paths:
      - test-install
  script:
    - yum localinstall -y installers/libgtirb-functions.rpm installers/libgtirb-functions-dev.rpm
    - cp src/main.cpp ./ && g++ main.cpp -o test-install -lgtirb-functions -lstdc++
    - ./test-install GrammaTech

rpm-installer-centos8:
  stage: cpack-deploy
  needs: [rpm-make-installers, rpm-test-dev, rpm-test-shared-lib]
  image: ${CENTOS_BASE_IMAGE}
  artifacts:
    paths:
      - '*hello*.rpm'
  script:
    - cp installers/*.rpm ./

rpm-test-shared-lib:
  stage: cpack-test-shared-lib
  needs: [rpm-make-installers, rpm-test-dev]
  image: ${CENTOS_BASE_IMAGE}
  script:
    - yum localinstall -y installers/libgtirb-functions.rpm installers/libgtirb-functions-dev.rpm
    - ./test-install GrammaTech

.build-cpack-template: &build-cpack
  stage: build
  needs: [check-format]
  artifacts:
    paths:
      - build/
  script:
    - *conan-template
    - mkdir build
    - cd build
    - conan install ..
    - cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTIRB_FUNCTION_STRIP_DEBUG_SYMBOLS=ON ..
    - make
    - ctest
    - cpack -G DEB -D CPACK_GTIRB_FUNCTION_PACKAGE=lib
    - cpack -G DEB -D CPACK_GTIRB_FUNCTION_PACKAGE=lib-dbg
    - cpack -G DEB -D CPACK_GTIRB_FUNCTION_PACKAGE=dev

.setup-repo: &setup-repo
  stage: cpack-make-installers
  artifacts:
    paths:
      - installers/
  script:
    - mkdir installers/
    - cp build/*.deb installers/
    - cp src/main.cpp installers/
    - cd installers/ && dpkg-scanpackages . /dev/null > Packages

.cpack-update-apt-sources-template: &cpack-update-apt-sources-template |
    echo -e "\ndeb [trusted=yes] file:$(pwd)/installers/ ./\n" >> /etc/apt/sources.list
    apt-get update -y

.cpack-check-lib-build-id: &cpack-check-lib-build-id |
    [ -f /usr/lib/debug/.build-id/$(readelf -n /usr/lib/libgtirb-functions.so | grep "Build ID: " | cut -d":" -f2 | sed -E "s/ ([a-f0-9]{2})([a-f0-9]{30,})/\1\/\2/g").debug ]


.test-dev: &test-dev
  stage: cpack-test
  artifacts:
    paths:
      - test-install
  script:
    - *cpack-update-apt-sources-template
    - apt-get install -y libgtirb-functions-dev
    - cp src/main.cpp ./ && g++ main.cpp -o test-install -lhello -lstdc++
    - ./test-install GrammaTech

.test-lib: &test-lib
  stage: cpack-test-shared-lib
  script:
    - *cpack-update-apt-sources-template
    - apt-get install -y libgtirb-functions-dev
    - ./test-install GrammaTech

.test-lib-dbg: &test-lib-dbg
  stage: cpack-test
  script:
    - 'echo -e "\ndeb [trusted=yes] file:$(pwd)/installers/ ./\n" >> /etc/apt/sources.list'
    - apt-get update -y
    - apt-get install -y libgtirb-functions libgtirb-functions-dbg
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/lib/libgtirb-functions.so | grep "Build ID: " | cut -d":" -f2 | sed -E "s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g").debug ]'

.debian-deploy: &debian-deploy
  stage: cpack-deploy
  artifacts:
    paths:
      - '*hello*.deb'
  script:
    - cp installers/*.deb ./

build-cpack-ubuntu18:
  image: ${UBUNTU18_CPP_IMAGE}
  <<: *build-cpack

setup-repo-ubuntu18:
  needs: [build-cpack-ubuntu18]
  image: ${UBUNTU18_CPP_IMAGE}
  <<: *setup-repo

test-dev-ubuntu18:
  needs: [setup-repo-ubuntu18]
  image: ${UBUNTU18_CPP_IMAGE}
  <<: *test-dev

test-lib-ubuntu18:
  needs: [setup-repo-ubuntu18, test-dev-ubuntu18]
  image: ${UBUNTU18_BASE_IMAGE}
  <<: *test-lib

test-lib-dbg-ubuntu18:
  needs: [setup-repo-ubuntu18]
  image: ${UBUNTU18_CPP_IMAGE}
  <<: *test-lib-dbg

deploy-ubuntu18:
  needs: [setup-repo-ubuntu18, test-dev-ubuntu18, test-lib-ubuntu18]
  image: ${UBUNTU18_BASE_IMAGE}
  <<: *debian-deploy

build-cpack-ubuntu20:
  image: ${UBUNTU20_CPP_IMAGE}
  <<: *build-cpack

setup-repo-ubuntu20:
  image: ${UBUNTU20_CPP_IMAGE}
  needs: [build-cpack-ubuntu20]
  <<: *setup-repo


test-dev-ubuntu20:
  image: ${UBUNTU20_CPP_IMAGE}
  needs: [setup-repo-ubuntu20]
  <<: *test-dev

test-lib-ubuntu20:
  image: ${UBUNTU20_BASE_IMAGE}
  needs: [setup-repo-ubuntu20, test-dev-ubuntu20]
  <<: *test-lib

test-lib-dbg-ubuntu20:
  image: ${UBUNTU20_CPP_IMAGE}
  needs: [setup-repo-ubuntu20]
  <<: *test-lib-dbg

deploy-ubuntu20:
  image: ${UBUNTU20_BASE_IMAGE}
  needs: [setup-repo-ubuntu20, test-dev-ubuntu20, test-lib-ubuntu20]
  <<: *debian-deploy
